Problem Summary:
You're given an array nums. Determine if it can be formed by rotating a non-decreasing sorted array any number of times (including 0 times). The array may contain duplicates.

NOTICE: 
👉 In a rotated sorted array, the array will have at most one "drop" — where a number is greater than its next one.

That’s the key observation!
------------------------------------------
🔍 WHAT IS A "DROP"?
A “drop” is when nums[i] > nums[i+1]

In a normally sorted array: No drops

In a rotated sorted array: One drop (e.g. [3, 4, 5, 1, 2] — drop at 5 → 1)

More than one drop? → Invalid

Special case: The array wraps around! So we check (nums[-1] > nums[0]) too!
------------------------------------------
✅ Approach
Count how many times nums[i] > nums[i+1]

Add one more check for nums[-1] > nums[0] (wrap-around)

If the number of such drops is more than 1, return False

Else, return True
-----------------------------------------
🧠 Example Walkthrough
Example: [3, 4, 5, 1, 2]

3 < 4 → ok

4 < 5 → ok

5 > 1 → drop ✅

1 < 2 → ok

Wrap-around: 2 < 3 → ok

1 drop → ✅ return True

Example: [2, 1, 3, 4]

2 > 1 → drop ✅

1 < 3 → ok

3 < 4 → ok

Wrap-around: 4 > 2 → another drop ❌

2 drops → return False
---------------------------------------
CODE

#include <vector>
using namespace std;

class Solution {
public:
    bool check(vector<int>& nums) {
        int count = 0;
        int n = nums.size();

        for (int i = 0; i < n - 1; ++i) {
            if (nums[i] > nums[i + 1]) {
                count++;
            }
        }

        // Check the wrap-around pair
        if (nums[n - 1] > nums[0]) {
            count++;
        }

        return count <= 1;
    }
};
